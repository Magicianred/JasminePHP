<?php
namespace MeadSteve\JasminePHP;

include_once __DIR__ . "/../src/MeadSteve/JasminePHP/JasmineTester.php";

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-26 at 11:22:12.
 */
class JasmineTesterTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var JasmineTester
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new JasmineTester;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers MeadSteve\JasminePHP\JasmineTester::RegisterJS
     * @expectedException InvalidArgumentException
     */
    public function testRegisterJSNonStringJS_ThrowsAnException()
    {
        $this->object->registerJS(array('not a string'), 'a string');
    }

	 /**
     * @covers MeadSteve\JasminePHP\JasmineTester::RegisterJS
     * @expectedException \InvalidArgumentException
     */
    public function testRegisterJSNonStringSpec_ThrowsAnException()
    {
        $this->object->registerJS('a string', array('not a string'));
    }

    /**
     * @covers MeadSteve\JasminePHP\JasmineTester::GetJSIncludeHTML
	 * @covers MeadSteve\JasminePHP\JasmineTester::RegisterJS
     */
    public function testGetJSIncludeHTML_HasJSPath()
    {
		$SourceFilePath = 'source_file.js';
		$SpecFilePath = 'spec_file.js';

       	$this->object->registerJS($SourceFilePath, $SpecFilePath);
		$ActualHTML = $this->object->getJSIncludeHTML();
		AssertThat($ActualHTML, containsString($SourceFilePath));
		AssertThat($ActualHTML, not(containsString($SpecFilePath)));
    }

    /**
     * @covers MeadSteve\JasminePHP\JasmineTester::GetJSSpecIncludeHTML
	 * @covers MeadSteve\JasminePHP\JasmineTester::RegisterJS
     */
    public function testGetJSSpecIncludeHTML_HasSpecPath()
    {
		$SourceFilePath = 'source_file.js';
		$SpecFilePath = 'spec_file.js';

       	$this->object->registerJS($SourceFilePath, $SpecFilePath);
		$ActualHTML = $this->object->getJSSpecIncludeHTML();
		AssertThat($ActualHTML, containsString($SpecFilePath));
		AssertThat($ActualHTML, not(containsString($SourceFilePath)));
    }

    /**
     * @covers MeadSteve\JasminePHP\JasmineTester::setPathTranslation
     */
    public function testSetPathTranslation_TransformsSourcePath()
    {
		$SourceFilePath = 'source_file.js';
		$SpecFilePath = 'spec_file.js';

        $expectedTranslatedSpec = 'file-spec.js';

        $this->object->registerJS($SourceFilePath, $SpecFilePath);

        // This translation should match the part before and after the _ and
        // and replace with -. and switch the parts around.
        $this->object->setPathTranslation('(.+)_(.+)\.(.+)', "$2-$1.$3");

        $ActualHTML = $this->object->getJSSpecIncludeHTML();

		AssertThat($ActualHTML, containsString($expectedTranslatedSpec));
		AssertThat($ActualHTML, not(containsString($SpecFilePath)));
    }

    /**
     * @covers MeadSteve\JasminePHP\JasmineTester::__toString
     */
    public function test__toString_ReturnsString()
    {
        $SourceFilePath = 'source_file.js';
		$SpecFilePath = 'spec_file.js';

       	$this->object->registerJS($SourceFilePath, $SpecFilePath);

		$JSHTML = $this->object->getJSIncludeHTML();
		$SpecHtml = $this->object->getJSSpecIncludeHTML();

		$ActualHTML = sprintf($this->object);

		AssertThat($ActualHTML, containsString($JSHTML));
		AssertThat($ActualHTML, containsString($SpecHtml));
    }
}
